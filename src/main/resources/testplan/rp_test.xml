<?xml version="1.0" encoding="UTF-8"?>
<TestPlan xmlns="http://nds.rub.de/oidc/test-model"
		  Name="RP-Test-Plan">

	<LearningStep Name="LearningStep">
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.RPLearningBrowser</BrowserSimulatorClass>
			<Parameter Key="browser.input.op_url">HONEST</Parameter>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-2>
	</LearningStep>

	<TestStep Name="ID Spoofing 1">
		<Description><![CDATA[
			<h1>ID Spoofing Attack</h1>
			In this test we use the Attacker OP and create an ID Token containing the identity (sub) of the victim,
			which is controlled by another OP: Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.  The attack needs additional configuration parameters:

			<h2>Execution.</h2>
			The OPIV issues an invalid ID token containing the victim's identity in the "sub".

			<h2>Result Evaluation.</h2>
			The attack is successful if the code or token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>

			<!-- gets the "sub" configured in the Honest OP" -->
			<Parameter Key="force_honest_idtoken_iss">false</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>
			<Parameter Key="force_honest_idtoken_name">false</Parameter>
			<Parameter Key="force_honest_idtoken_username">false</Parameter>
			<Parameter Key="force_honest_idtoken_email">false</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ID Spoofing 2">
		<Description><![CDATA[
			<h1>ID Spoofing Attack</h1>
			In this test we use the Attacker OP and create an ID Token containing the identity (iss+sub) of the victim,
			which is controlled by another OP: Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.  The attack needs additional configuration parameters:

			<h2>Execution.</h2>
			The OPIV issues an invalid ID token containing the victim's identity in the "sub" and the Honest OP as "iss".

			<h2>Result Evaluation.</h2>
			The attack is successful if the code or token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>

			<!-- gets the "iss" and "sub" configured in the Honest OP" -->
			<Parameter Key="force_honest_idtoken_iss">true</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>
			<Parameter Key="force_honest_idtoken_name">false</Parameter>
			<Parameter Key="force_honest_idtoken_username">false</Parameter>
			<Parameter Key="force_honest_idtoken_email">false</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ID Spoofing 3">
		<Description><![CDATA[
			<h1>ID Spoofing Attack</h1>
			In this test we use the Attacker OP and create an ID Token containing the identity (name+username+email) of
			the victim, which is controlled by another OP: Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.  The attack needs additional configuration parameters:

			<h2>Execution.</h2>
			The OPIV issues valid ID token containing victim's identity as subclaims.

			<h2>Result Evaluation.</h2>
			The attack is successful if the code or token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
			<!-- gets the "name", "username" and "email" configured in the Honest OP" -->
			<Parameter Key="force_honest_idtoken_iss">false</Parameter>
			<Parameter Key="force_honest_idtoken_sub">false</Parameter>
			<Parameter Key="force_honest_idtoken_name">true</Parameter>
			<Parameter Key="force_honest_idtoken_username">true</Parameter>
			<Parameter Key="force_honest_idtoken_email">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Issuer Confusion">
		<Description><![CDATA[
			<h1>Issuer Confusion</h1>
			In this test we use the Attacker OP to return maliciously crafted Discovery document (containing the issuer of the honest OP) and afterwards to create an ID Token containing the identity (iss+sub) of the victim, which is controlled by another OP: Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow. The attack needs additional configuration parameters: subject and issuer

			<h2>Execution.</h2>
			The OPIV returns invalid "issuer" parameters during Discovery.

			<h2>Result Evaluation.</h2>
			The attack is successful if the code or token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.IssuerConfusionOP</ImplementationClass>
			<Parameter Key="force_honest_discovery_issuer">true</Parameter>
			<Parameter Key="force_honest_idtoken_issuer">true</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 1 (future work)">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing valid signature signed with an untrusted key.
			The key is referenced by the "kid" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="force_idtoken_header_kid_untrusted_key">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 2 (future work)">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing valid signature signed with untrusted key.
			The key is referenced by the "x5u" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_x5u_untrusted_key">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 3 (future work)">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing valid signature signed with untrusted key.
			The key is referenced by the "x5c" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_x5c_untrusted_key">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 4 (future work)">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing valid signature signed with untrusted key.
			The key is referenced by the "jku" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_jku_untrusted_key">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 5 (future work)">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing valid signature signed with untrusted key.
			The key is referenced by the "jwk" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_jwk_untrusted_key">true</Parameter>
		</OPConfig-2>
	</TestStep>


	<TestStep Name="Key Confusion 6 ">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			The Client has the same "client_id" on the Honest and Malicious OP.

			<h2>Execution.</h2>
			Session Overwriting attack in order to confuse the client to use the wrong key.

			Test desciption
				Step 1: starts authentication with Malicious OP
				Step 2: timeout before sending the Authentication Response (code or idtoken/access token)
				Step 3: starts authentication with Honest OP
			Step 4: stops the timeout on the honest OP and sends the Authentication Response (code or idtoken/access token)

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">true</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.SessionOverwritingOPBrowserSimulator</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<Parameter Key="registration_clientid">de.rub.nds.oidc.server.op.DefaultOP.IDToken.audience</Parameter>

			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_alg_hmac">true</Parameter>
			<Parameter Key="force_honest_idtoken_iss">true</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="MaliciousEntpointAttack">
		<Description><![CDATA[
			<h1>Malicious Endpoint Attacks</h1>
			In this test we use the Attacker OP to return maliciously crafted Discovery document and afterwards to create an ID Token containing the identity of the victim, which is controlled by another OP – Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The Attacker OP returns the following configuration during the Discovery phase.
			<pre>
			 {
				"issuer": "https://opivAttackerOP.com",
				"registration_endpoint": "https://opivHonestOP.com/register",
				"authorization_endpoint": "https://opivHonestOP.com/auth",
				"token_endpoint": "https://opivAttackerOP.com/token",
				"userinfo_endpoint": "https://opivAttackerOP.com/userinfo"
				...
			 }
			</pre>

			<h2>What happens if no discovery is supported?</h2>

			<h2>Result Evaluation.</h2>
			The goal of this test is to verify whether the End-User authentication can
			be broken. The attack is successful if the Attacker OP receives any secret information, for example,
			client_id, client_secret,code or access token, generated by the Honest OP.
			Injection and DoS attacks are considered out of scope for the tests provided by OPIV.

		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">true</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.MaliciousEndpointOP</ImplementationClass>

			<Parameter Key="force_honest_discovery_issuer">false</Parameter>
			<Parameter Key="force_honest_discovery_registrationEP">true</Parameter>
			<Parameter Key="force_honest_discovery_authorizationEP">true</Parameter>
			<Parameter Key="force_honest_discovery_tokenEP">false</Parameter>
			<Parameter Key="force_honest_discovery_userinfoEP">false</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ReplayAttack_1">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing expired "exp" timestamp.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_exp_oneday">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ReplayAttack_2">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing expired "exp" timestamp.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_exp_oneyear">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ReplayAttack_3">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing invalid "iat" timestamp.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_iat_oneday">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ReplayAttack_4">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing invalid "iat" timestamp.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_iat_oneyear">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ReplayAttack_5">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing constant “nonce” value.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_nonce_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ReplayAttack_6">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token without a “nonce” parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>

			<Parameter Key="force_idtoken_nonce_excluded">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Session Overwriting">
		<Description><![CDATA[
			<h1>Session Overwriting</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The Session Overwriting test consists of three steps and requires the participation of the Attacker OP and the Honest OP.

			Step 1: starts authentication with Honest OP
			Step 2: timeout before sending the Authentication Response (code or idtoken/access token)
			Step 3: starts authentication with Malicious OP
			Step 4: stops the timeout on the honest OP and sends the Authentication Response (code or idtoken/access token)

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.SessionOverwritingOPBrowserSimulator</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SessionOverwritingOP</ImplementationClass>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Signature Manipulation 1">
		<Description><![CDATA[
			<h1>Signature Manipulation</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing wrong signature.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SignatureManipulationOP</ImplementationClass>
			<Parameter Key="force_idtoken_signature_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Signature Manipulation 2">
		<Description><![CDATA[
			<h1>Signature Manipulation</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing invalid signature and "none" algorithm.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SignatureManipulationOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_alg_none">true</Parameter>
			<Parameter Key="force_idtoken_signature_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Signature Manipulation 3">
		<Description><![CDATA[
			<h1>Signature Manipulation</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token containing no signature and "none" algorithm.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SignatureManipulationOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_alg_none">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="CSRF">
		<Description><![CDATA[
			<h1>CSRF Protection via the “state” parameter</h1>
			The OPIV tests the Validation of the "state" parameter on the Client.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV returns invalid "state" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the code or token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.InvalidStateOP</ImplementationClass>

			<Parameter Key="force_state_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="CSRF 2">
		<Description><![CDATA[
			<h1>CSRF Protection via the “state” parameter</h1>
			The OPIV tests the Validation of the "state" parameter on the Client.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV returns "state" parameter issued within another browser session.
			Step 1: Starts the browser, initiates the authentication with the MaliciousOP and gets the received state parameter
			Step 2: OP uses the received "state" parameter in a new browser session
			<h2>Result Evaluation.</h2>
			The attack is successful if the code or token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.InvalidStateOP</ImplementationClass>

			<Parameter Key="force_state_fromotherSession">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="CSRF 3">
		<Description><![CDATA[
			<h1>CSRF Protection via the “state” parameter</h1>
			The OPIV tests the Validation of the "state" parameter on the Client.
			The OPIV does not return the "state" parameter.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.

			<h2>Execution.</h2>
			The OPIV returns "state" parameter issued within another browser session.
			Step 1: Starts the browser, initiates the authentication with the MaliciousOP and gets the received state parameter
			Step 2: OP uses the received "state" parameter in a new browser session
			<h2>Result Evaluation.</h2>
			The attack is successful if the code or token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.InvalidStateOP</ImplementationClass>

			<Parameter Key="force_force_state_excluded">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="TRC 1">
		<Description><![CDATA[
			<h1>Token Recipient Confusion Attack</h1>
			The OPIV tests the Validation of the “audience” parameter on the Client by issuing maliciously crafted ID tokens.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token, which does not contain an "audience" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.trcOP</ImplementationClass>

			<Parameter Key="force_idtoken_aud_excluded">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="TRC 2">
		<Description><![CDATA[
			<h1>Token Recipient Confusion Attack</h1>
			The OPIV tests the Validation of the “audience” parameter on the Client by issuing maliciously crafted ID tokens.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token, which contains invalid "aud" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.trcOP</ImplementationClass>

			<Parameter Key="force_idtoken_aud_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>


	<TestStep Name="TRC 3">
		<Description><![CDATA[
			<h1>Token Recipient Confusion Attack</h1>
			The OPIV tests the Validation of the “audience” parameter on the Client by issuing maliciously crafted ID tokens.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The OPIV issues an ID token, which contains invalid "aud" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<SeleniumScript>
			<BrowserSimulatorClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</BrowserSimulatorClass>
		</SeleniumScript>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.trcOP</ImplementationClass>

			<Parameter Key="force_honest_idtoken_aud">true</Parameter>
		</OPConfig-2>
	</TestStep>

</TestPlan>
